import React from 'react';
import moment from 'jalali-moment';

function _inheritsLoose(subClass, superClass) {
  subClass.prototype = Object.create(superClass.prototype);
  subClass.prototype.constructor = subClass;
  subClass.__proto__ = superClass;
}

var styles = {"akbariDatePicker":"_1Fowe","blue":"_xHAXC","top":"_vpxAd","active_day":"_hA0bg","item":"_VrCvP","red":"_3nWpX","right":"_2ehri","left":"_2lGdA","yellow":"_3kj3e","navy_blue":"_1EEGw","a_datepicker":"_20VXG","day_item":"_2A4tH","clear":"_ukP7F","input":"_2IYfc","center":"_1kbaO","days":"_3KAu7","items":"_GSnNY","hidden":"_3o8gR","deactive":"_30sEO","backdrop":"_2Xnd5"};

var default_format = 'YYYY/MM/DD';
var fa_day_names = ['شنبه', 'یک‌شنبه', 'دوشنبه', 'سه‌شنبه', 'چهارشنبه', 'پنج‌شنبه', 'جمعه'];
function set_days(date, input_type, min_date, max_date, format) {
  if (format === void 0) {
    format = default_format;
  }

  if (input_type == 'jalali') {
    return fa_days(date, min_date, max_date, format);
  } else {
    return en_days(date, min_date, max_date, format);
  }
}
function get_day_names(input_type) {
  var days = [];

  if (input_type == 'jalali') {
    days = ['شنبه', 'یک‌شنبه', 'دوشنبه', 'سه‌شنبه', 'چهارشنبه', 'پنج‌شنبه', 'جمعه'];
  } else {
    days = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];
  }

  return days;
}

function fa_days(date, min_date, max_date, format) {
  if (format === void 0) {
    format = default_format;
  }

  var day_name = moment(date, format).set('date', 1).locale('fa').format('dddd');
  var day_name_index = fa_day_names.findIndex(function (a) {
    return a.indexOf(day_name) > -1;
  });
  var new_date = moment(date, format);
  var month = new_date.format('MM');
  var year = moment(date, format).format('YYYY');
  var min_year = moment(min_date, format).format('YYYY');
  var min_month = moment(min_date, format).format('MM');
  var max_month = moment(max_date, format).format('MM');
  var max_year = moment(max_date, format).format('YYYY');
  var min_day = moment(min_date, format).format('DD');
  var max_day = moment(max_date, format).format('DD');
  var days = [];
  var count = 30;

  if (month <= 6) {
    count = 31;
  } else {
    count = 30;
  }

  var _i = -1 * day_name_index;

  for (var i = _i; i < count; i++) {
    var data = {};
    data.day = i + 1;
    data.active = true;
    data.hidden = false;

    if (i < 0) {
      data.hidden = true;
    }

    if (i >= 0) {
      if (i + 1 < Number(min_day) && Number(year) == Number(min_year) && Number(month) == Number(min_month)) {
        data.active = false;
      }

      if (i + 1 > Number(max_day) && Number(year) == Number(max_year) && Number(month) == Number(max_month)) {
        data.active = false;
      }
    }

    days.push(data);
  }

  return days;
}

function en_days(date, min_date, max_date, format) {
  if (format === void 0) {
    format = default_format;
  }

  var day_name = moment(date, format).set('date', 1).format('dddd');
  var day_name_index = get_day_names('gero').findIndex(function (a) {
    return a.indexOf(day_name) > -1;
  });
  var new_date = moment(date, format);
  var month = new_date.format('MM');
  var year = moment(date, format).format('YYYY');
  var min_year = moment(min_date, format).format('YYYY');
  var min_month = moment(min_date, format).format('MM');
  var max_month = moment(max_date, format).format('MM');
  var max_year = moment(max_date, format).format('YYYY');
  var min_day = moment(min_date, format).format('DD');
  var max_day = moment(max_date, format).format('DD');
  var month_name = moment(date, format).format('MMMM').toLowerCase();
  var days = [];
  var count = 30;

  if (month_name == 'january' || month_name == 'march' || month_name == 'may' || month_name == 'july' || month_name == 'august' || month_name == 'october' || month_name == 'december') {
    count = 31;
  }

  if (month_name == 'april' || month_name == 'june' || month_name == 'september' || month_name == 'november') {
    count = 30;
  }

  if (month_name == 'february') {
    count = 29;
  }

  var _i = -1 * day_name_index;

  for (var i = _i; i < count; i++) {
    var data = {};
    data.day = i + 1;
    data.active = true;
    data.hidden = false;

    if (i < 0) {
      data.hidden = true;
    }

    if (i >= 0) {
      if (i + 1 < Number(min_day) && Number(year) == Number(min_year) && Number(month) == Number(min_month)) {
        data.active = false;
      }

      if (i + 1 > Number(max_day) && Number(year) == Number(max_year) && Number(month) == Number(max_month)) {
        data.active = false;
      }
    }

    days.push(data);
  }

  return days;
}

function set_years(date, min_date, max_date, format) {
  if (format === void 0) {
    format = default_format;
  }

  var min_year;

  if (!min_date) {
    min_year = moment(date, format).subtract(30, 'years').format('YYYY');
  } else {
    min_year = moment(min_date, format).format('YYYY');
  }

  var max_year;

  if (!max_date) {
    max_year = moment(date, format).add(30, 'years').format('YYYY');
  } else {
    max_year = moment(max_date, format).format('YYYY');
  }

  min_year = Number(min_year);
  max_year = Number(max_year);
  var years = [];

  for (var i = min_year; i < max_year + 1; i++) {
    years.push(i);
  }

  return years;
}
function set_months(date, input_type, min_date, max_date, format) {
  var months = [];

  if (input_type == 'jalali') {
    months = [{
      name: 'فروردین',
      show: true,
      index: 1
    }, {
      name: 'اردیبهشت',
      show: true,
      index: 2
    }, {
      name: 'خرداد',
      show: true,
      index: 3
    }, {
      name: 'تیر',
      show: true,
      index: 4
    }, {
      name: 'مرداد',
      show: true,
      index: 5
    }, {
      name: 'شهریور',
      show: true,
      index: 6
    }, {
      name: 'مهر',
      show: true,
      index: 7
    }, {
      name: 'آبان',
      show: true,
      index: 8
    }, {
      name: 'آذر',
      show: true,
      index: 9
    }, {
      name: 'دی',
      show: true,
      index: 10
    }, {
      name: 'بهمن',
      show: true,
      index: 11
    }, {
      name: 'اسفند',
      show: true,
      index: 12
    }];
  } else {
    months = [{
      name: 'January',
      show: true,
      index: 1
    }, {
      name: 'February',
      show: true,
      index: 2
    }, {
      name: 'March',
      show: true,
      index: 3
    }, {
      name: 'April',
      show: true,
      index: 4
    }, {
      name: 'May',
      show: true,
      index: 5
    }, {
      name: 'June',
      show: true,
      index: 6
    }, {
      name: 'July',
      show: true,
      index: 7
    }, {
      name: 'August',
      show: true,
      index: 8
    }, {
      name: 'September',
      show: true,
      index: 9
    }, {
      name: 'October',
      show: true,
      index: 10
    }, {
      name: 'November',
      show: true,
      index: 11
    }, {
      name: 'December',
      show: true,
      index: 12
    }];
  }

  var month = moment(date, format).format('MM');
  var year = moment(date, format).format('YYYY');
  var min_year = moment(min_date, format).format('YYYY');
  var max_year = moment(max_date, format).format('YYYY');
  var min_month = moment(min_date, format).format('M');
  var max_month = moment(max_date, format).format('MM');
  months.forEach(function (item, index) {
    if (index + 1 < min_month && year == min_year) {
      item.show = false;
    } else if (index + 1 > max_month && year == max_year) {
      item.show = false;
    } else {
      item.show = true;
    }
  });
  return months;
}

var AkbariDatePicker = /*#__PURE__*/function (_React$Component) {
  _inheritsLoose(AkbariDatePicker, _React$Component);

  function AkbariDatePicker() {
    var _this;

    _this = _React$Component.call(this) || this;
    _this.state = {
      show_date_picker: false,
      days: [],
      months: [],
      years: [],
      current_date: '',
      current_day: '',
      current_month: '',
      currnt_year: '',
      selected_date: '',
      date_changed: false,
      show_backdrop: false,
      day_names: [],
      theme: styles.light,
      current: ''
    };
    _this.parent_ref = React.createRef();
    _this.picker_ref = React.createRef();
    return _this;
  }

  var _proto = AkbariDatePicker.prototype;

  _proto.componentDidMount = function componentDidMount() {
    this.start();
    this.set_theme();
  };

  _proto.change_size = function change_size() {
    var _this2 = this;

    window.addEventListener('resize', function () {
      _this2.setState({
        show_date_picker: false,
        show_backdrop: false
      });
    });
  };

  _proto.set_theme = function set_theme() {
    if (this.props.theme == 'light') {
      this.setState({
        theme: styles.theme
      });
    }

    if (this.props.theme == 'blue') {
      this.setState({
        theme: styles.blue
      });
    }

    if (this.props.theme == 'yellow') {
      this.setState({
        theme: styles.yellow
      });
    }

    if (this.props.theme == 'red') {
      this.setState({
        theme: styles.red
      });
    }

    if (this.props.theme == 'navy_blue') {
      this.setState({
        theme: styles.navy_blue
      });
    }
  };

  _proto.start = function start() {
    var _this3 = this;

    this.setState({
      current: this.props.current_date,
      current_date: this.props.current_date,
      selected_date: this.props.current_date
    }, function () {
      _this3.set_currents();

      _this3.set_years_months_days();
    });
    this.hide_date_picker();
  };

  _proto.set_currents = function set_currents() {
    var day = moment(this.state.current_date, this.props.default_format).format('DD');
    var month = moment(this.state.current_date, this.props.default_format).format('MM');
    var year = moment(this.state.current_date, this.props.default_format).format('YYYY');
    this.setState({
      current_day: day,
      current_month: Number(month),
      currnt_year: year
    });
  };

  _proto.change_date = function change_date() {
    this.start();
  };

  _proto.clear_value = function clear_value() {
    this.setState({
      date_changed: false,
      selected_date: '',
      current: ''
    });
    this.props.on_change_date('');
  };

  _proto.set_years_months_days = function set_years_months_days() {
    this.setState({
      days: set_days(this.state.current_date, this.props.input_type, this.props.min_date, this.props.max_date, this.props.default_format),
      years: set_years(this.props.current_date, this.props.min_date, this.props.max_date, this.props.default_format),
      months: set_months(this.state.current_date, this.props.input_type, this.props.min_date, this.props.max_date, this.props.default_format),
      day_names: get_day_names(this.props.input_type)
    });
  };

  _proto.change_year = function change_year(e) {
    var _this4 = this;

    var value = e.target.value;
    var new_date = moment(this.state.current_date, this.props.default_format).set('year', value).format(this.props.default_format);
    this.setState({
      current_date: new_date
    }, function () {
      var min_month = moment(_this4.props.min_date, _this4.props.default_format).format('MM');
      var min_year = moment(_this4.props.min_date, _this4.props.default_format).format('YYYY');
      var max_month = moment(_this4.props.max_date, _this4.props.default_format).format('MM');
      var max_year = moment(_this4.props.max_date, _this4.props.default_format).format('YYYY');
      var month = moment(_this4.state.current_date, _this4.props.default_format).format('MM');
      var year = moment(_this4.state.current_date, _this4.props.default_format).format('YYYY');

      if (Number(month) < Number(min_month) && Number(year) == Number(min_year)) {
        var set_date = moment(_this4.state.current_date, _this4.props.default_format).set('month', Number(min_month) - 1).format(_this4.props.default_format);

        _this4.setState({
          current_date: set_date
        }, function () {
          _this4.set_years_months_days();

          _this4.set_currents();
        });
      } else if (Number(month) > Number(max_month) && Number(year) == Number(max_year)) {
        var set_date = moment(_this4.state.current_date, _this4.props.default_format).set('month', Number(max_month) - 1).format(_this4.props.default_format);

        _this4.setState({
          current_date: set_date
        }, function () {
          _this4.set_years_months_days();

          _this4.set_currents();
        });
      } else {
        _this4.set_years_months_days();

        _this4.set_currents();
      }
    });
  };

  _proto.change_month = function change_month(e) {
    var _this5 = this;

    var value = e.target.getElementsByTagName('option')[e.target.selectedIndex].getAttribute('data-index');
    var new_date = moment(this.state.current_date, this.props.default_format).set('month', value).format(this.props.default_format);
    this.setState({
      current_date: new_date
    }, function () {
      _this5.set_years_months_days();

      _this5.set_currents();
    });
  };

  _proto.change_day = function change_day(item) {
    var _this6 = this;

    if (item.active && !item.hidden) {
      var day = item.day;
      var new_date = moment(this.state.current_date, this.props.default_format).set('date', day).format(this.props.default_format);
      this.setState({
        current_date: new_date,
        selected_date: new_date,
        date_changed: true,
        show_backdrop: false
      }, function () {
        _this6.set_years_months_days();

        _this6.set_currents();
      });
      this.setState({
        show_date_picker: false
      });

      if (this.props.on_change_date) {
        this.props.on_change_date(new_date);
      }
    }
  };

  _proto.next_month = function next_month() {
    var _this7 = this;

    var max_month = moment(this.props.max_date, this.props.default_format).format('MM');
    var max_year = moment(this.props.max_date, this.props.default_format).format('YYYY');
    var month = moment(this.state.current_date, this.props.default_format).format('MM');
    var year = moment(this.state.current_date, this.props.default_format).format('YYYY');

    if (Number(month) == Number(max_month) && Number(year) == Number(max_year)) ; else {
      var new_date = moment(this.state.current_date, this.props.default_format).add(1, 'months').format(this.props.default_format);
      this.setState({
        current_date: new_date
      }, function () {
        _this7.set_years_months_days();

        _this7.set_currents();
      });
    }
  };

  _proto.prev_month = function prev_month() {
    var _this8 = this;

    var min_month = moment(this.props.min_date, this.props.default_format).format('MM');
    var min_year = moment(this.props.min_date, this.props.default_format).format('YYYY');
    var month = moment(this.state.current_date, this.props.default_format).format('MM');
    var year = moment(this.state.current_date, this.props.default_format).format('YYYY');

    if (Number(month) == Number(min_month) && Number(year) == Number(min_year)) ; else {
      var new_date = moment(this.state.current_date, this.props.default_format).subtract(1, 'months').format(this.props.default_format);
      this.setState({
        current_date: new_date
      }, function () {
        _this8.set_years_months_days();

        _this8.set_currents();
      });
    }
  };

  _proto.focus = function focus(e) {
    if (window.matchMedia('(min-width:773px)').matches) {
      var rect = this.parent_ref.current.getBoundingClientRect();
      var parentRect = this.parent_ref.current.offsetParent;
      var right = Math.abs(parentRect.clientWidth - rect.left);

      if (right < 300) {
        this.picker_ref.current.style.left = 'auto';
        this.picker_ref.current.style.right = '0px';
      } else {
        this.picker_ref.current.style.left = '0px';
        this.picker_ref.current.style.right = 'auto';
      }
    } else {
      this.setState({
        show_backdrop: true
      });
    }

    this.setState({
      show_date_picker: true
    });
    this.set_z_index();
  };

  _proto.set_z_index = function set_z_index() {
    var date_pickers = document.getElementsByClassName('akbari-date-picker');
    var count = date_pickers.length;
    var z = 0;

    for (var i = count; i > 0; i--) {
      z++;

      if (window.matchMedia('(max-width: 773px)').matches) {
        date_pickers[i - 1].style.zIndex = 100;
      } else {
        date_pickers[i - 1].style.zIndex = z + 100000;
      }
    }

    if (window.matchMedia('(max-width: 773px)').matches) {
      this.parent_ref.current.style.zIndex = 100000;
    }
  };

  _proto.hide_date_picker = function hide_date_picker() {
    var _this9 = this;

    var my_target = this.parent_ref.current;
    window.addEventListener('click', function (e) {
      if (!my_target.contains(e.target)) {
        if (_this9.state.show_date_picker || _this9.show_backdrop) {
          _this9.setState({
            show_date_picker: false,
            show_backdrop: false
          });
        }
      }
    });
  };

  _proto.find_active_day = function find_active_day(item) {
    var selected_year = Number(moment(this.state.selected_date, this.props.default_format).format('YYYY'));
    var selected_month = Number(moment(this.state.selected_date, this.props.default_format).format('MM'));
    var current_month = moment(this.state.current_date, this.props.default_format).format('MM');
    var current_year = moment(this.state.current_date, this.props.default_format).format('YYYY');
    var current_day = moment(this.state.current_date, this.props.default_format).format('DD');

    if (Number(item.day) == Number(current_day) && selected_month == current_month && selected_year == current_year) {
      return styles.active_day;
    }

    return '';
  };

  _proto.generate_days = function generate_days(item, index) {};

  _proto.render = function render() {
    var _this10 = this;

    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement("div", {
      className: styles.backdrop,
      style: {
        display: this.state.show_backdrop ? 'block' : 'none'
      },
      id: "backdrop"
    }), /*#__PURE__*/React.createElement("div", {
      className: styles.akbariDatePicker + ' akbari-date-picker ' + this.state.theme,
      ref: this.parent_ref,
      style: {
        width: this.props.width
      }
    }, /*#__PURE__*/React.createElement("input", {
      type: "text",
      className: styles.input,
      onClick: this.focus.bind(this),
      readOnly: true,
      value: this.state.selected_date ? this.state.selected_date : this.state.current
    }), /*#__PURE__*/React.createElement("span", {
      onClick: this.clear_value.bind(this),
      className: styles.clear
    }, "\xD7"), /*#__PURE__*/React.createElement("div", {
      className: styles.a_datepicker,
      ref: this.picker_ref,
      id: "a_date_picker",
      style: {
        display: this.state.show_date_picker ? 'block' : 'none'
      }
    }, /*#__PURE__*/React.createElement("div", {
      className: styles.top
    }, /*#__PURE__*/React.createElement("div", {
      className: styles.right,
      onClick: this.prev_month.bind(this)
    }, /*#__PURE__*/React.createElement("div", null, this.props.input_type == 'jalali' ? 'قبلی' : 'prev')), /*#__PURE__*/React.createElement("div", {
      className: styles.center
    }, /*#__PURE__*/React.createElement("select", {
      onChange: this.change_year.bind(this),
      value: this.state.currnt_year
    }, this.state.years.map(function (item, index) {
      return /*#__PURE__*/React.createElement("option", {
        key: index,
        value: item
      }, item);
    })), /*#__PURE__*/React.createElement("select", {
      onChange: this.change_month.bind(this),
      value: this.state.current_month
    }, this.state.months.filter(function (item) {
      return item.show == true;
    }).map(function (item, index) {
      return /*#__PURE__*/React.createElement("option", {
        key: index,
        "data-index": item.index - 1,
        value: item.index
      }, item.name);
    }))), /*#__PURE__*/React.createElement("div", {
      className: styles.left,
      onClick: this.next_month.bind(this)
    }, " ", /*#__PURE__*/React.createElement("div", null, this.props.input_type == 'jalali' ? 'بعدی' : 'next'))), /*#__PURE__*/React.createElement("div", {
      className: styles.days,
      style: {
        direction: this.props.input_type == 'jalali' ? 'rtl' : 'ltr'
      }
    }, this.state.day_names.map(function (item, index) {
      if (_this10.props.input_type == 'jalali') {
        return /*#__PURE__*/React.createElement("div", {
          key: index,
          className: styles.day_item
        }, item.split('')[0]);
      } else {
        return /*#__PURE__*/React.createElement("div", {
          key: index,
          className: styles.day_item
        }, item.split('')[0] + item.split('')[1]);
      }
    })), /*#__PURE__*/React.createElement("div", {
      className: styles.items,
      style: {
        direction: this.props.input_type == 'jalali' ? 'rtl' : 'ltr'
      }
    }, this.state.days.map(function (item, index) {
      return /*#__PURE__*/React.createElement("div", {
        key: index,
        onClick: _this10.change_day.bind(_this10, item),
        className: styles.item + ' ' + _this10.find_active_day(item) + ' ' + (item.hidden ? styles.hidden : '') + (item.active ? '' : styles.deactive)
      }, item.day);
    })))));
  };

  return AkbariDatePicker;
}(React.Component);
AkbariDatePicker.defaultProps = {
  current_date: moment(moment(new Date(), 'YYYY/MM/DD').format('YYYY/M/DD'), 'YYYY/MM/DD').locale('fa').format('YYYY/M/D'),
  input_type: 'jalali',
  default_format: 'YYYY/MM/DD',
  theme: styles.light
};

export { AkbariDatePicker };
//# sourceMappingURL=index.modern.js.map
